<?php
declare(strict_types=1);

namespace teewurst\Prs4AdvancedWildcardComposer\FileAccessor;

/**
 * Class Psr4Autoload
 *
 * Reads and writes current Psr4 autoload file
 *
 * @package teewurst\Prs4AdvancedWildcardComposer\FileAccessor
 * @author  Martin Ruf <Martin.Ruf@check24.de>
 */
class Psr4Autoload
{

    private const DEFAULT_PATH_TO_PSR4_COMPOSER_FILE = 'composer/autoload_psr4.php';

    /** @var string */
    private $relativeRsr4AutoloadPath;
    /** @var string[][] */
    private $contents;
    /** @var string */
    private $vendorPath;

    /**
     * Psr4Autoload constructor.
     *
     * @param string $vendorPath               Absolute path to current vendor folder
     * @param string $relativeRsr4AutoloadPath Relatove path to composer psr4 autoload file
     */
    public function __construct(string $vendorPath, string $relativeRsr4AutoloadPath = self::DEFAULT_PATH_TO_PSR4_COMPOSER_FILE)
    {
        $this->relativeRsr4AutoloadPath = $relativeRsr4AutoloadPath;
        $this->vendorPath = rtrim($vendorPath, ['\\', '/']);
    }

    /**
     * Returns the current contents for the psr4 file as array
     *
     * @return array
     */
    public function requireCurrentFile(): array
    {
        /** @var array $contents */
        $this->contents = require $this->relativeRsr4AutoloadPath;
        return $this->contents;
    }

    /**
     * Sets field
     *
     * @param mixed $contents
     *
     * @return void
     */
    public function setContents($contents): void
    {
        $this->contents = $contents;
    }

    public function persist(): void
    {
        $translatedContent = '';

        foreach ($this->contents as $namespace => $folders) {
            /** @noinspection UnNecessaryDoubleQuotesInspection */
            $translatedContent
                .= '    \'$namespace\' => array('
                . implode(', ', array_map([$this, 'replaceDir'], $folders))
                . '),' . PHP_EOL;
        }

        $fileContents = <<<EOF
<?php

// autoload_classmap.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
$translatedContent);
EOF;
        file_put_contents(
            $this->vendorPath . DIRECTORY_SEPARATOR . $this->relativeRsr4AutoloadPath,
            $fileContents
        );
    }

    /**
     * @param $folder
     * @return string
     */
    private function replaceDir($folder): string
    {
        if (strpos($folder, $this->vendorPath) === 0) {
            $arrayValue = str_replace(
                $this->vendorPath . DIRECTORY_SEPARATOR,
                '$vendorDir . \'',
                $folder
            ) . '\'';
        } elseif (strpos($folder, dirname($this->vendorPath)) === 0) {
            $arrayValue = str_replace(
                dirname($this->vendorPath) . DIRECTORY_SEPARATOR,
                '$baseDir . \'',
                $folder
            ) . '\'';
        } else {
            $arrayValue = $folder;
        }
        return $arrayValue;
    }
}
